generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

type preferences {
  theme    String
  currency String
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  preferences   preferences?

  plan       Plan?   @default(free)
  customerId String?

  MarkupCalculations                MarkupCalculation[]
  BreakEvenPointCalculations        BreakEvenPointCalculation[]
  InvestmentTimeCalculations        InvestmentTimeCalculation[]
  PresentValueCalculations          PresentValueCalculation[]
  AnnualizedReturnCalculations      AnnualizedReturnCalculation[]
  CompoundInterestCalculations      CompoundInterestCalculation[]
  EventProbabilityCalculations      EventProbabilityCalculation[]
  PriceToEarningsRatioCalculations  PriceToEarningsRatioCalculation[]
  DollarCostAverageCalculations     DollarCostAverageCalculation[]
  EnterpriseValueCalculations       EnterpriseValueCalculation[]
  SipCalculation                    SipCalculation[]
  Subscription                      Subscription?
  LumpsumCalculation                LumpsumCalculation[]
  StepUpSipCalculation              StepUpSipCalculation[]
  XirrCalculation                   XirrCalculation[]
  RetirmentPlanningCalculation      RetirmentPlanningCalculation[]
  WealthGainCalculation             WealthGainCalculation[]
  RecurringDepositCalculation       RecurringDepositCalculation[]
  FixedDepositCalculation           FixedDepositCalculation[]
  PpfCalculation                    PpfCalculation[]
  HomeLoanEmiCalculation            HomeLoanEmiCalculation[]
  PersonalLoanEmiCalculation        PersonalLoanEmiCalculation[]
  SwpCalculation                    SwpCalculation[]
  GoalPlannerSip                    GoalPlannerSip[]
  CagrCalculation                   CagrCalculation[]
  SipDelayCalculator                SipDelayCalculator[]
  RiskAdjustedReturnCalculator      RiskAdjustedReturnCalculator[]
  InflationAdjustedReturnCalculator InflationAdjustedReturnCalculator[]
  ChildEducationFundCalculator      ChildEducationFundCalculator[]
  MonthlyBudgetCalculator           MonthlyBudgetCalculator[]
  EmergencyFundCalculator           EmergencyFundCalculator[]
  ROICalculator                     ROICalculator[]
  MarkUpCalculator                  MarkUpCalculator[]
  BreakEvenCalculator               BreakEvenCalculator[]
  ProfitCalculator                  ProfitCalculator[]
}

enum Plan {
  free
  premium
}

enum SubscriptionPeriod {
  weekly
  monthly
  yearly
}

model Subscription {
  id     String             @id @default(cuid()) @map("_id")
  userId String             @unique @db.ObjectId
  plan   Plan
  period SubscriptionPeriod

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

type BreakEvenPointCalculationFormData {
  fixedCosts          Float
  variableCostPerUnit Float
  pricePerUnit        Float
}

model BreakEvenPointCalculation {
  id        String                            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                            @db.ObjectId
  name      String
  formData  BreakEvenPointCalculationFormData
  createdAt DateTime                          @default(now())
  updatedAt DateTime                          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type MarkupCalculationFormData {
  cost       Float
  salesPrice Float
}

model MarkupCalculation {
  id        String                    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                    @db.ObjectId
  name      String
  formData  MarkupCalculationFormData
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type InvestmentTimeCalculationFormData {
  startingBalance    Float
  endingBalance      Float
  annualInterestRate Float
}

model InvestmentTimeCalculation {
  id        String                            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                            @db.ObjectId
  name      String
  formData  InvestmentTimeCalculationFormData
  createdAt DateTime                          @default(now())
  updatedAt DateTime                          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type PresentValueCalculationFormData {
  startingBalance    Float
  duration           Float
  durationMultiplier Float
  discountRate       Float
}

model PresentValueCalculation {
  id        String                          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                          @db.ObjectId
  name      String
  formData  PresentValueCalculationFormData
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type AnnualizedReturnCalculationFormData {
  startingBalance    Float
  endingBalance      Float
  duration           Float
  durationMultiplier Float
}

model AnnualizedReturnCalculation {
  id        String                              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                              @db.ObjectId
  name      String
  formData  AnnualizedReturnCalculationFormData
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CompoundInterestCalculationFormData {
  startingBalance        Float
  contribution           Float
  contributionMultiplier Float
  contributionFrequency  Float
  interestRate           Float
  compoundFrequency      Float
  duration               Float
  durationMultiplier     Float
}

model CompoundInterestCalculation {
  id        String                              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                              @db.ObjectId
  name      String
  formData  CompoundInterestCalculationFormData
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type EventProbabilityCalculationFormData {
  eventProbabilityPercent Float
  eventTries              Int
}

model EventProbabilityCalculation {
  id        String                              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                              @db.ObjectId
  name      String
  formData  EventProbabilityCalculationFormData
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type PriceToEarningsRatioCalculationFormData {
  sharePrice       Float
  earningsPerShare Float
}

model PriceToEarningsRatioCalculation {
  id        String                                  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                                  @db.ObjectId
  name      String
  formData  PriceToEarningsRatioCalculationFormData
  createdAt DateTime                                @default(now())
  updatedAt DateTime                                @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type DollarCostAverageCalculationFormData {
  initialInvestment  Float
  sharePrice         Float
  deposit            Float
  depositFrequency   Float
  interestRate       Float
  compoundFrequency  Float
  duration           Float
  durationMultiplier Float
}

model DollarCostAverageCalculation {
  id        String                               @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                               @db.ObjectId
  name      String
  formData  DollarCostAverageCalculationFormData
  createdAt DateTime                             @default(now())
  updatedAt DateTime                             @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type EnterpriseValueCalculationFormData {
  sharePrice        Float
  sharesOutstanding Float
  cash              Float
  debt              Float
}

model EnterpriseValueCalculation {
  id        String                             @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                             @db.ObjectId
  name      String
  formData  EnterpriseValueCalculationFormData
  createdAt DateTime                           @default(now())
  updatedAt DateTime                           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type SipCalculationFormData {
  monthlyInvestment  Float
  expectedReturnRate Float
  timePeriod         Float
}

model SipCalculation {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                 @db.ObjectId
  name      String
  formData  SipCalculationFormData
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type LumpsumCalculationFormData {
  totalInvestment    Float
  expectedReturnRate Float
  timePeriod         Float
}

model LumpsumCalculation {
  id        String                     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                     @db.ObjectId
  name      String
  formData  LumpsumCalculationFormData
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type StepUpSipCalculationFormData {
  monthlyInvestment  Float
  annualStepUp       Float
  expectedReturnRate Float
  timePeriod         Float
}

model StepUpSipCalculation {
  id        String                       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                       @db.ObjectId
  name      String
  formData  StepUpSipCalculationFormData
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type XirrCalculationFormData {
  amountInvested   Float
  amountAtMaturity Float
  timePeriod       Float
}

model XirrCalculation {
  id        String                  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                  @db.ObjectId
  name      String
  formData  XirrCalculationFormData
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type RetirmentPlanningCalculationFormData {
  currentAge                               Float
  desiredRetirementAge                     Float
  lifeExpectancy                           Float
  monthlyIncomeRequiredInRetirementYears   Float
  expectedInflationRate                    Float
  expectedReturnOnInvestmentPreRetirement  Float
  expectedReturnOnInvestmentPostRetirement Float
  existingRetirementFund                   Float
}

model RetirmentPlanningCalculation {
  id        String                               @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                               @db.ObjectId
  name      String
  formData  RetirmentPlanningCalculationFormData
  createdAt DateTime                             @default(now())
  updatedAt DateTime                             @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type WealthGainCalculationFormData {
  initialInvestment    Float
  periodicInvestment   Float
  investmentFrequency  Float
  expectedRateOfGrowth Float
  timePeriod           Float
}

model WealthGainCalculation {
  id        String                        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                        @db.ObjectId
  name      String
  formData  WealthGainCalculationFormData
  createdAt DateTime                      @default(now())
  updatedAt DateTime                      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type RecurringDepositCalculationFormData {
  monthlyInvestment Float
  rateOfInterest    Float
  duration          Float
  durationType      Float
}

model RecurringDepositCalculation {
  id        String                              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                              @db.ObjectId
  name      String
  formData  RecurringDepositCalculationFormData
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type FixedDepositCalculationFormData {
  totalInvestment Float
  rateOfInterest  Float
  duration        Float
  durationType    Float
}

model FixedDepositCalculation {
  id        String                          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                          @db.ObjectId
  name      String
  formData  FixedDepositCalculationFormData
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type PpfCalculationFormData {
  yearlyInvestment Float
  timePeriod       Float
  RateOfInterest   Float
}

model PpfCalculation {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                 @db.ObjectId
  name      String
  formData  PpfCalculationFormData
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type HomeLoanEmiCalculationFormData {
  loanAmount     Float
  rateOfInterest Float
  loanTenure     Float
  tenureType     Float
}

model HomeLoanEmiCalculation {
  id        String                         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                         @db.ObjectId
  name      String
  formData  HomeLoanEmiCalculationFormData
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type PersonalLoanEmiCalculationFormData {
  loanAmount     Float
  rateOfInterest Float
  loanTenure     Float
  tenureType     Float
}

model PersonalLoanEmiCalculation {
  id        String                             @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                             @db.ObjectId
  name      String
  formData  PersonalLoanEmiCalculationFormData
  createdAt DateTime                           @default(now())
  updatedAt DateTime                           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type SwpCalculationFormData {
  totalInvestment    Float
  withdrawalPerMonth Float
  expectedReturnRate Float
  timePeriod         Float
}

model SwpCalculation {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                 @db.ObjectId
  name      String
  formData  SwpCalculationFormData
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type GoalPlannerSipFormData {
  investmentFrequency  Float
  targetedWealth       Float
  expectedRateOfReturn Float
  tenure               Float
}

model GoalPlannerSip {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                 @db.ObjectId
  name      String
  formData  GoalPlannerSipFormData
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CagrCalculationFormData {
  initialInvestment    Float
  finalInvestment      Float
  durationOfInvestment Float
}

model CagrCalculation {
  id        String                  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                  @db.ObjectId
  name      String
  formData  CagrCalculationFormData
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type SipDelayCalculatorFormData {
  monthlySipAmount            Float
  sipPeriodInYear             Float
  expectedReturnsOnInvestment Float
  periodOfDelayMonth          Float
}

model SipDelayCalculator {
  id        String                     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                     @db.ObjectId
  name      String
  formData  SipDelayCalculatorFormData
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type RiskAdjustedReturnCalculatorFormData {
  investmentAmount Float
  expectedReturn   Float
  riskFreeRate     Float
  investmentRisk   Float
}

model RiskAdjustedReturnCalculator {
  id        String                               @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                               @db.ObjectId
  name      String
  formData  RiskAdjustedReturnCalculatorFormData
  createdAt DateTime                             @default(now())
  updatedAt DateTime                             @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type InflationAdjustedReturnCalculatorFormData {
  investmentAmount Float
  inflationRate    Float
  numberOfYears    Float
}

model InflationAdjustedReturnCalculator {
  id        String                                    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                                    @db.ObjectId
  name      String
  formData  InflationAdjustedReturnCalculatorFormData
  createdAt DateTime                                  @default(now())
  updatedAt DateTime                                  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type ChildEducationFundCalculatorFormData {
  currentAgeOfChild            Float
  ageForHigherEducation        Float
  expectedAnnualRateOfReturn   Float
  presentCostOfHigherEducation Float
}

model ChildEducationFundCalculator {
  id        String                               @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                               @db.ObjectId
  name      String
  formData  ChildEducationFundCalculatorFormData
  createdAt DateTime                             @default(now())
  updatedAt DateTime                             @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type MonthlyBudgetCalculatorFormData {
  monthlyIncome          Float
  housingExpenses        Float
  utilitiesExpenses      Float
  groceriesExpenses      Float
  transportationExpenses Float
  otherExpenses          Float
}

model MonthlyBudgetCalculator {
  id        String                          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                          @db.ObjectId
  name      String
  formData  MonthlyBudgetCalculatorFormData
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type EmergencyFundCalculatorFormData {
  averageMonthlyExpenses Float
  monthsOfSavingsDesired Float
}

model EmergencyFundCalculator {
  id        String                          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                          @db.ObjectId
  name      String
  formData  EmergencyFundCalculatorFormData
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type ROICalculatorFormData {
  amountInvested             Float
  amountReturned             Float
  investmentPeriodYearsFloat Float
}

model ROICalculator {
  id        String                @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                @db.ObjectId
  name      String
  formData  ROICalculatorFormData
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type BreakEvenCalculatorFormData {
  fixedCosts          Float
  variableCostPerUnit Float
  sellingPricePerUnit Float
  expectedUnitSales   Float
}

model BreakEvenCalculator {
  id        String                      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                      @db.ObjectId
  name      String
  formData  BreakEvenCalculatorFormData
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type ProfitCalculatorFormData {
  revenue  Float
  expenses Float
}

model ProfitCalculator {
  id        String                   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                   @db.ObjectId
  name      String
  formData  ProfitCalculatorFormData
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type MarkUpCalculatorFormData {
  costPrice    Float
  sellingPrice Float
}

model MarkUpCalculator {
  id        String                   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                   @db.ObjectId
  name      String
  formData  MarkUpCalculatorFormData
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
